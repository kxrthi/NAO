#Importing necessary modules
import base64
import time,requests
import os
from flask import Flask, render_template, request
from naoqi import ALProxy
import dance
app = Flask(__name__)
import speech_recognition as sr
import qi,cv2
import numpy as np

# Connect to the NAO robot
ip = "192.168.196.40"
port = 9559

#Create proxies for the required NAO modules
motion_proxy = ALProxy("ALMotion", ip, port)
posture_proxy = ALProxy("ALRobotPosture", ip, port)
tts_proxy = ALProxy("ALTextToSpeech", ip, port)
video_proxy = ALProxy("ALVideoDevice", ip, port)
speech_proxy = ALProxy("ALSpeechRecognition", ip, port)

#Creating a class for connecting during speech recognition
class AssistentAgent():

    def __init__(self, ip, port):
        self.ip = '192.168.196.40'
        self.port = 9559
        self.r = sr.Recognizer()
        self.r.energy_threshold = 4000

    def speech_recognize(self, time):
        with sr.Microphone() as source:
            self.r.adjust_for_ambient_noise(source)
            print ('mic on... start recording!')
            audio = self.r.listen(source)
            # playsound(audio)
            try:
                print ('Recognized words: ' + self.r.recognize(audio))
                return self.r.recognize(audio)
            except LookupError as e:
                 print (e)
                 return ('there was an error!')
            except sr.UnknownValueError as e:
                print (e)
                print ('what do you mean? i do not understand')
                return ('')


## Define the routes so that the request is received,the corresponding function will run.
## Some routes are not called in the webpage but instead are called in the listen() function when particular speech is recognized.
#For rendering initial webpage
@app.route('/')
def index():
    return render_template('NAO-Web.html')

#Moving in four directions
@app.route('/move')
def move():
    direction = request.args.get('direction')
    steps = 5 
    if direction == 'front':
        motion_proxy.moveTo(0.5, 0, 0) 
    elif direction == 'back':
        motion_proxy.moveTo(-0.5, 0, 0) 
    elif direction == 'left':
        motion_proxy.moveTo(0, 0, 1.5708)
    elif direction == 'right':
        motion_proxy.moveTo(0, 0, -1.5708)  
    return ''

#Turn it 180 degrees
@app.route('/turn')
def turn():
    motion_proxy.moveTo(0, 0, 3.14159)  # Turn 180 degrees left
    return ''

#Make the robot sit
@app.route('/sit')
def sit():
    posture_proxy.goToPosture("Sit", 1.0)  # Make the robot sit
    return ''

#Make the robot stand
@app.route('/stand')
def stand():
    posture_proxy.goToPosture("Stand", 1.0)  # Make the robot stand
    return ''

#Make the robot greet and bow down
@app.route('/greet')
def greet():
        tts_proxy.say("GOOD AFTERNOON PANEL MEMBERS!")
        names = list()
        times = list()
        keys = list()
        names.append("LAnklePitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[-0.121359, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.409751, [3, -0.516667, 0], [3, 0.566667, 0]], [-0.35, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.0153604, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.116564, [3, -0.516667, 0], [3, 0.566667, 0]], [0.00167382, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[-0.306757, [3, -0.166667, 0], [3, 0.516667, 0]], [-1.30539, [3, -0.516667, 0], [3, 0.383333, 0]], [-0.306757, [3, -0.383333, 0], [3, 0.183333, 0]], [-1.00156, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[-0.12583, [3, -0.166667, 0], [3, 0.516667, 0]], [0.469363, [3, -0.516667, 0], [3, 0.383333, 0]], [-0.12583, [3, -0.383333, 0.417297], [3, 0.183333, -0.199577]], [-1.38126, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[0.924024, [3, -0.166667, 0], [3, 0.516667, 0]], [0.924024, [3, -0.516667, 0], [3, 0.383333, 0]], [0.924024, [3, -0.383333, 0], [3, 0.183333, 0]], [0.25, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.0749446, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.761086, [3, -0.516667, 0], [3, 0.566667, 0]], [-0.44116, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.5, 2.05, 3.75])
        keys.append([[-0.0477461, [3, -0.166667, 0], [3, 0.516667, 0]], [0.028954, [3, -0.516667, 0], [3, 0.566667, 0]], [0, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.0291025, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.319116, [3, -0.516667, 0], [3, 0.566667, 0]], [0.0031713, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.0855841, [3, -0.166667, 0], [3, 0.516667, 0]], [1.0474, [3, -0.516667, 0], [3, 0.566667, 0]], [0.699999, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[2.0417, [3, -0.166667, 0], [3, 0.516667, 0]], [2.06319, [3, -0.516667, 0], [3, 0.383333, 0]], [2.0417, [3, -0.383333, 0.0214849], [3, 0.183333, -0.0102754]], [1.40101, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[0.417205, [3, -0.166667, 0], [3, 0.516667, 0]], [0.246933, [3, -0.516667, 0], [3, 0.383333, 0]], [0.417205, [3, -0.383333, 0], [3, 0.183333, 0]], [0.30903, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[-0.998676, [3, -0.166667, 0], [3, 0.516667, 0]], [-1.01708, [3, -0.516667, 0], [3, 0.383333, 0]], [-0.998676, [3, -0.383333, -0.018408], [3, 0.183333, 0.00880384]], [-0.00181738, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[-0.102805, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.543063, [3, -0.516667, 0], [3, 0.566667, 0]], [-0.35, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.5, 2.05, 3.75])
        keys.append([[-0.00456227, [3, -0.166667, 0], [3, 0.516667, 0]], [0.135032, [3, -0.516667, 0], [3, 0.566667, 0]], [0.00303459, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[0.435699, [3, -0.166667, 0], [3, 0.516667, 0]], [1.27786, [3, -0.516667, 0], [3, 0.383333, 0]], [0.435699, [3, -0.383333, 0], [3, 0.183333, 0]], [1.00286, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[0.222388, [3, -0.166667, 0], [3, 0.516667, 0]], [0.374254, [3, -0.516667, 0], [3, 0.383333, 0]], [0.222388, [3, -0.383333, 0], [3, 0.183333, 0]], [1.38788, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[0.917842, [3, -0.166667, 0], [3, 0.516667, 0]], [0.469091, [3, -0.516667, 0], [3, 0.383333, 0]], [0.917842, [3, -0.383333, 0], [3, 0.183333, 0]], [0.25, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.041361, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.65354, [3, -0.516667, 0], [3, 0.566667, 0]], [-0.441725, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.0168944, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.0444656, [3, -0.516667, 0], [3, 0.566667, 0]], [0.00789664, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.5, 2.05, 3.75])
        keys.append([[0.103898, [3, -0.166667, 0], [3, 0.516667, 0]], [1.03657, [3, -0.516667, 0], [3, 0.566667, 0]], [0.699999, [3, -0.566667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[1.06617, [3, -0.166667, 0], [3, 0.516667, 0]], [0.943452, [3, -0.516667, 0], [3, 0.383333, 0]], [1.06617, [3, -0.383333, -0.102537], [3, 0.183333, 0.0490393]], [1.39818, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[-0.398883, [3, -0.166667, 0], [3, 0.516667, 0]], [-0.0429939, [3, -0.516667, 0], [3, 0.383333, 0]], [-0.398883, [3, -0.383333, 0], [3, 0.183333, 0]], [-0.303682, [3, -0.183333, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.5, 2.05, 3.2, 3.75])
        keys.append([[0.949504, [3, -0.166667, 0], [3, 0.516667, 0]], [0.964844, [3, -0.516667, 0], [3, 0.383333, 0]], [0.949504, [3, -0.383333, 0.0153397], [3, 0.183333, -0.0073364]], [0.0017279, [3, -0.183333, 0], [3, 0, 0]]])
        motion_proxy.angleInterpolationBezier(names, times, keys)
        return ''

#Make the robot fist bump
@app.route('/fist')
def fistbump():
    motion_proxy.setAngles('LShoulderPitch', 0, 0.2)
    motion_proxy.setAngles('LShoulderRoll', 0, 0.2)
    motion_proxy.setAngles('LElbowYaw', 0, 0.2)
    motion_proxy.setAngles('LElbowRoll', 0, 0.2)
    motion_proxy.setAngles('LWristYaw', 0, 0.2)
    return ''

#Make the robot dance
@app.route('/dance')
def dancer():
    armdance()
    return ''

#Make the robot say a random fact about numbers from the net using api
@app.route('/fact')
def factapi():
    api_endpoint = "http://numbersapi.com/random"
    response = requests.get(api_endpoint)
    fact = response.text
    tts_proxy.say(str(fact))
    return ''

#Make the robot say a random joke about numbers from the net using api
@app.route('/joke')
def jokeapi():
    url = "https://v2.jokeapi.dev/joke/Any?lang=en&type=single&category=Programming&flags=SAFE"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if data['type'] == 'single':
            joke = data['joke']
            print(joke)
            tts_proxy.say(str(joke))
        else:
            print("No joke available.")
            tts_proxy.say("No joke available.")
    
    except requests.exceptions.RequestException as e:
        print("Error:", e)

    
    return ''

#Control the robot using gesture recognition by calling the gesture() code
import gesture
@app.route('/gr')
def ges_rec():
    gesture()
    
#A live feed is sent from NAO Camera to the Webpage
@app.route('/live_feed')
def live_feed():
    # Connect to the NAO robot
    session = qi.Session()
    session.connect("tcp://" +ip+ ":9559")

    # Access the NAO's camera module
    video_service = session.service("ALVideoDevice")

    # Set the camera parameters
    resolution = 1  # 640x480 resolution
    color_space = 11  # RGB color space
    fps = 60  # frames per second
    camera_id = video_service.subscribeCamera("python_GVM", 0, resolution, color_space, fps)

    while True:
            # Retrieve the current image from the NAO's camera
            image = video_service.getImageRemote(camera_id)

            # Extract the image properties
            width = image[0]
            height = image[1]
            image_data = image[6]

            # Create a numpy array from the image data
            np_arr = np.frombuffer(image_data, np.uint8).reshape((height, width, 3))

            # Display the image
            cv2.imshow("NAO Camera", np_arr)
            key = cv2.waitKey(10)
            if key == 27:
                break  # Refresh the image display


    # Release the camera subscription and disconnect from the NAO robot
    video_service.unsubscribe(camera_id)
    session.close()

    # Close the image display
    cv2.destroyAllWindows()
    return ''

#Text-to-Speech
@app.route('/speak', methods=['POST'])
def speak():
    sentence = request.form['sentence']
    tts_proxy.say(str(sentence))  # Make the robot speak the input sentence
    return ''

#Action defined to make robot blow kisses
def kiss():
        tts_proxy.say('I LOVE YOU TOO GUYS . HERE IS A FLYING KISS FOR YOU')
        names=list()
        times=list()
        keys=list()
        names.append("HeadPitch")
        times.append([0.2, 0.6, 1.4, 2.04, 2.4, 3.2, 3.84, 4.2])
        keys.append([[-0.0046272, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.01078, [3, -0.133333, 0], [3, 0.266667, 0]], [-0.01078, [3, -0.266667, 0], [3, 0.213333, 0]], [-0.112024, [3, -0.213333, 0], [3, 0.12, 0]], [-0.01078, [3, -0.12, 0], [3, 0.266667, 0]], [-0.01078, [3, -0.266667, 0], [3, 0.213333, 0]], [-0.112024, [3, -0.213333, 0], [3, 0.12, 0]], [-0.00409839, [3, -0.12, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([0.2, 0.6, 1.4, 2.04, 2.4, 3.2, 3.84, 4.2])
        keys.append([[0.00648624, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.010696, [3, -0.133333, 0], [3, 0.266667, 0]], [0.010696, [3, -0.266667, 0], [3, 0.213333, 0]], [0.338973, [3, -0.213333, 0], [3, 0.12, 0]], [0.010696, [3, -0.12, 0], [3, 0.266667, 0]], [0.010696, [3, -0.266667, 0], [3, 0.213333, 0]], [0.338973, [3, -0.213333, 0], [3, 0.12, 0]], [0.00919698, [3, -0.12, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.35, [3, -0.0666667, 0], [3, 0.173333, 0]], [-0.359129, [3, -0.173333, 0], [3, 0.6, 0]], [-0.359129, [3, -0.6, 0], [3, 0.56, 0]], [-0.35, [3, -0.56, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.00902358, [3, -0.0666667, 0], [3, 0.173333, 0]], [-0.0797476, [3, -0.173333, 0], [3, 0.6, 0]], [-0.0797476, [3, -0.6, 0], [3, 0.56, 0]], [0, [3, -0.56, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[-1.01789, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.56617, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.658043, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.56617, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.658043, [3, -0.106667, -0.210158], [3, 0.106667, 0.210158]], [-0.305225, [3, -0.106667, 0], [3, 0.12, 0]], [-1.56617, [3, -0.12, 0], [3, 0.133333, 0]], [-0.658043, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.56617, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.658043, [3, -0.106667, -0.210158], [3, 0.106667, 0.210158]], [-0.305225, [3, -0.106667, 0], [3, 0.12, 0]], [-1.00727, [3, -0.12, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[-1.38905, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.624379, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.26866, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.624379, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.26866, [3, -0.106667, 0.242373], [3, 0.106667, -0.242373]], [-2.07862, [3, -0.106667, 0], [3, 0.12, 0]], [-0.624379, [3, -0.12, 0], [3, 0.133333, 0]], [-1.26866, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.624379, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.26866, [3, -0.106667, 0.242373], [3, 0.106667, -0.242373]], [-2.07862, [3, -0.106667, 0], [3, 0.12, 0]], [-1.3896, [3, -0.12, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[0.252174, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.917114, [3, -0.133333, -0.082886], [3, 0.133333, 0.082886]], [1, [3, -0.133333, 0], [3, 0.133333, 0]], [0.917114, [3, -0.133333, 0], [3, 0.106667, 0]], [1, [3, -0.106667, 0], [3, 0.106667, 0]], [0.997478, [3, -0.106667, 0.00252199], [3, 0.12, -0.00283724]], [0.917114, [3, -0.12, 0], [3, 0.133333, 0]], [1, [3, -0.133333, 0], [3, 0.133333, 0]], [0.917114, [3, -0.133333, 0], [3, 0.106667, 0]], [1, [3, -0.106667, 0], [3, 0.106667, 0]], [0.997478, [3, -0.106667, 0.00252199], [3, 0.12, -0.00283724]], [0.25, [3, -0.12, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.45, [3, -0.0666667, 0], [3, 0.173333, 0]], [-0.27941, [3, -0.173333, 0], [3, 0.6, 0]], [-0.27941, [3, -0.6, 0], [3, 0.56, 0]], [-0.45, [3, -0.56, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[0.00159365, [3, -0.0666667, 0], [3, 0.173333, 0]], [0.168548, [3, -0.173333, 0], [3, 0.6, 0]], [0.168548, [3, -0.6, 0], [3, 0.56, 0]], [0.00837686, [3, -0.56, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.00420801, [3, -0.0666667, 0], [3, 0.173333, 0]], [-0.170318, [3, -0.173333, 0], [3, 0.6, 0]], [-0.170318, [3, -0.6, 0], [3, 0.56, 0]], [-0.00409839, [3, -0.56, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[0.699999, [3, -0.0666667, 0], [3, 0.173333, 0]], [0.680776, [3, -0.173333, 0], [3, 0.6, 0]], [0.680776, [3, -0.6, 0], [3, 0.56, 0]], [0.7, [3, -0.56, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[1.39733, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.496974, [3, -0.133333, 0.195313], [3, 0.133333, -0.195313]], [0.225456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.496974, [3, -0.133333, 0], [3, 0.106667, 0]], [0.225456, [3, -0.106667, 0], [3, 0.106667, 0]], [0.4034, [3, -0.106667, -0.042591], [3, 0.12, 0.0479148]], [0.496974, [3, -0.12, 0], [3, 0.133333, 0]], [0.225456, [3, -0.133333, 0], [3, 0.133333, 0]], [0.496974, [3, -0.133333, 0], [3, 0.106667, 0]], [0.225456, [3, -0.106667, 0], [3, 0.106667, 0]], [0.4034, [3, -0.106667, -0.177943], [3, 0.12, 0.200186]], [1.40275, [3, -0.12, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[0.297991, [3, -0.0666667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.133333, 0]], [0.05058, [3, -0.133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.106667, 0]], [0.05058, [3, -0.106667, -0.05058], [3, 0.106667, 0.05058]], [0.77923, [3, -0.106667, 0], [3, 0.12, 0]], [0, [3, -0.12, 0], [3, 0.133333, 0]], [0.05058, [3, -0.133333, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.106667, 0]], [0.05058, [3, -0.106667, -0.05058], [3, 0.106667, 0.05058]], [0.77923, [3, -0.106667, 0], [3, 0.12, 0]], [0.294329, [3, -0.12, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[-0.00289152, [3, -0.0666667, 0], [3, 0.133333, 0]], [-1.00941, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.00941, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.00941, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.00941, [3, -0.106667, 0], [3, 0.106667, 0]], [-1.01095, [3, -0.106667, 0], [3, 0.12, 0]], [-1.00941, [3, -0.12, 0], [3, 0.133333, 0]], [-1.00941, [3, -0.133333, 0], [3, 0.133333, 0]], [-1.00941, [3, -0.133333, 0], [3, 0.106667, 0]], [-1.00941, [3, -0.106667, 0], [3, 0.106667, 0]], [-1.01095, [3, -0.106667, 0], [3, 0.12, 0]], [0.00504533, [3, -0.12, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.35, [3, -0.0666667, 0], [3, 0.173333, 0]], [-0.184108, [3, -0.173333, 0], [3, 0.6, 0]], [-0.184108, [3, -0.6, 0], [3, 0.56, 0]], [-0.35, [3, -0.56, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[0.00303459, [3, -0.0666667, 0], [3, 0.173333, 0]], [0.0675357, [3, -0.173333, 0], [3, 0.6, 0]], [0.0675357, [3, -0.6, 0], [3, 0.56, 0]], [0, [3, -0.56, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[1.0023, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.504728, [3, -0.133333, 0.0736319], [3, 0.133333, -0.0736319]], [0.431096, [3, -0.133333, 0], [3, 0.133333, 0]], [0.504728, [3, -0.133333, 0], [3, 0.106667, 0]], [0.431096, [3, -0.106667, 0], [3, 0.106667, 0]], [0.596768, [3, -0.106667, 0], [3, 0.12, 0]], [0.504728, [3, -0.12, 0.0261587], [3, 0.133333, -0.0290652]], [0.431096, [3, -0.133333, 0], [3, 0.133333, 0]], [0.504728, [3, -0.133333, 0], [3, 0.106667, 0]], [0.431096, [3, -0.106667, 0], [3, 0.106667, 0]], [0.596768, [3, -0.106667, -0.0903796], [3, 0.12, 0.101677]], [1.00727, [3, -0.12, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[1.38723, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.42641, [3, -0.133333, 0.0153397], [3, 0.133333, -0.0153397]], [0.41107, [3, -0.133333, 0], [3, 0.133333, 0]], [0.42641, [3, -0.133333, 0], [3, 0.106667, 0]], [0.41107, [3, -0.106667, 0.0153397], [3, 0.106667, -0.0153397]], [0.196309, [3, -0.106667, 0], [3, 0.12, 0]], [0.42641, [3, -0.12, 0], [3, 0.133333, 0]], [0.41107, [3, -0.133333, 0], [3, 0.133333, 0]], [0.42641, [3, -0.133333, 0], [3, 0.106667, 0]], [0.41107, [3, -0.106667, 0.0153397], [3, 0.106667, -0.0153397]], [0.196309, [3, -0.106667, 0], [3, 0.12, 0]], [1.3896, [3, -0.12, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.2, 0.6, 1.4, 2.04, 2.4, 3.2, 3.84, 4.2])
        keys.append([[0.251241, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.630909, [3, -0.133333, 0], [3, 0.266667, 0]], [0.630909, [3, -0.266667, 0], [3, 0.213333, 0]], [0.572727, [3, -0.213333, 0], [3, 0.12, 0]], [0.630909, [3, -0.12, 0], [3, 0.266667, 0]], [0.630909, [3, -0.266667, 0], [3, 0.213333, 0]], [0.572727, [3, -0.213333, 0.058182], [3, 0.12, -0.0327274]], [0.25, [3, -0.12, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.45, [3, -0.0666667, 0], [3, 0.173333, 0]], [-0.336004, [3, -0.173333, 0], [3, 0.6, 0]], [-0.336004, [3, -0.6, 0], [3, 0.56, 0]], [-0.45, [3, -0.56, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[-0.00288084, [3, -0.0666667, 0], [3, 0.173333, 0]], [0.0015544, [3, -0.173333, 0], [3, 0.6, 0]], [0.0015544, [3, -0.6, 0], [3, 0.56, 0]], [-0.00837686, [3, -0.56, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.2, 0.72, 2.52, 4.2])
        keys.append([[0.699999, [3, -0.0666667, 0], [3, 0.173333, 0]], [0.556428, [3, -0.173333, 0], [3, 0.6, 0]], [0.556428, [3, -0.6, 0], [3, 0.56, 0]], [0.7, [3, -0.56, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[1.39931, [3, -0.0666667, 0], [3, 0.133333, 0]], [1.14441, [3, -0.133333, 0.0352819], [3, 0.133333, -0.0352819]], [1.10912, [3, -0.133333, 0], [3, 0.133333, 0]], [1.14441, [3, -0.133333, 0], [3, 0.106667, 0]], [1.10912, [3, -0.106667, 0], [3, 0.106667, 0]], [1.27173, [3, -0.106667, 0], [3, 0.12, 0]], [1.14441, [3, -0.12, 0.0256743], [3, 0.133333, -0.028527]], [1.10912, [3, -0.133333, 0], [3, 0.133333, 0]], [1.14441, [3, -0.133333, 0], [3, 0.106667, 0]], [1.10912, [3, -0.106667, 0], [3, 0.106667, 0]], [1.27173, [3, -0.106667, -0.0460592], [3, 0.12, 0.0518166]], [1.40275, [3, -0.12, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.2, 0.6, 1, 1.4, 1.72, 2.04, 2.4, 2.8, 3.2, 3.52, 3.84, 4.2])
        keys.append([[-0.299256, [3, -0.0666667, 0], [3, 0.133333, 0]], [-0.271559, [3, -0.133333, -0.0076841], [3, 0.133333, 0.0076841]], [-0.253151, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.271559, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.253151, [3, -0.106667, 0], [3, 0.106667, 0]], [-0.579894, [3, -0.106667, 0], [3, 0.12, 0]], [-0.271559, [3, -0.12, -0.0165672], [3, 0.133333, 0.018408]], [-0.253151, [3, -0.133333, 0], [3, 0.133333, 0]], [-0.271559, [3, -0.133333, 0], [3, 0.106667, 0]], [-0.253151, [3, -0.106667, 0], [3, 0.106667, 0]], [-0.579894, [3, -0.106667, 0], [3, 0.12, 0]], [-0.294329, [3, -0.12, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.2, 0.6, 1.4, 2.04, 2.4, 3.2, 3.84, 4.2])
        keys.append([[0.00274628, [3, -0.0666667, 0], [3, 0.133333, 0]], [0.958708, [3, -0.133333, 0], [3, 0.266667, 0]], [0.958708, [3, -0.266667, 0], [3, 0.213333, 0]], [0.944902, [3, -0.213333, 0], [3, 0.12, 0]], [0.958708, [3, -0.12, 0], [3, 0.266667, 0]], [0.958708, [3, -0.266667, 0], [3, 0.213333, 0]], [0.944902, [3, -0.213333, 0.0138056], [3, 0.12, -0.00776563]], [0.00504533, [3, -0.12, 0], [3, 0, 0]]])
        motion_proxy.angleInterpolationBezier(names, times, keys)
        return ''

#Make the robot dance
def newdance():
        names=list()
        times=list()
        keys=list()
        tts_proxy.say("YOU SHOULD HOLD A GUITAR FIRST AND THEN DO THIS")
        names.append("LAnklePitch")
        times.append([0.433333, 4])
        keys.append([[-0.359129, [3, -0.144444, 0], [3, 1.18889, 0]], [-0.104485, [3, -1.18889, 0], [3, 0, 0]]])
        names.append("LAnkleRoll")
        times.append([0.433333, 4])
        keys.append([[-0.0766796, [3, -0.144444, 0], [3, 1.18889, 0]], [0.00114113, [3, -1.18889, 0], [3, 0, 0]]])
        names.append("LElbowRoll")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[-1.06916, [3, -0.0555556, 0], [3, 0.144444, 0]], [-1.05688, [3, -0.144444, 0], [3, 0.0777778, 0]], [-1.05688, [3, -0.0777778, 0], [3, 0.0777778, 0]], [-1.04461, [3, -0.0777778, 0], [3, 0.1, 0]], [-1.04461, [3, -0.1, 0], [3, 0.111111, 0]], [-1.04461, [3, -0.111111, 0], [3, 0.0666667, 0]], [-1.04461, [3, -0.0666667, 0], [3, 0.0222222, 0]], [-1.04461, [3, -0.0222222, 0], [3, 0.111111, 0]], [-1.04461, [3, -0.111111, 0], [3, 0.0888889, 0]], [-1.04461, [3, -0.0888889, 0], [3, 0.0777778, 0]], [-1.04461, [3, -0.0777778, 0], [3, 0.0888889, 0]], [-1.04461, [3, -0.0888889, 0], [3, 0.111111, 0]], [-1.04461, [3, -0.111111, 0], [3, 0.2, 0]], [-0.319319, [3, -0.2, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[-1.76722, [3, -0.0555556, 0], [3, 0.144444, 0]], [-1.75341, [3, -0.144444, 0], [3, 0.0777778, 0]], [-1.75495, [3, -0.0777778, 0], [3, 0.0777778, 0]], [-1.75034, [3, -0.0777778, 0], [3, 0.1, 0]], [-1.75034, [3, -0.1, 0], [3, 0.111111, 0]], [-1.75034, [3, -0.111111, 0], [3, 0.0666667, 0]], [-1.75034, [3, -0.0666667, 0], [3, 0.0222222, 0]], [-1.75034, [3, -0.0222222, 0], [3, 0.111111, 0]], [-1.75034, [3, -0.111111, 0], [3, 0.0888889, 0]], [-1.75034, [3, -0.0888889, 0], [3, 0.0777778, 0]], [-1.75034, [3, -0.0777778, 0], [3, 0.0888889, 0]], [-1.75034, [3, -0.0888889, 0], [3, 0.111111, 0]], [-1.75034, [3, -0.111111, 0], [3, 0.2, 0]], [-0.772985, [3, -0.2, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.166667, 4])
        keys.append([[0.922933, [3, -0.0555556, 0], [3, 1.27778, 0]], [0.91041, [3, -1.27778, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.433333, 4])
        keys.append([[-0.291681, [3, -0.144444, 0], [3, 1.18889, 0]], [0.0531118, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.433333, 4])
        keys.append([[0.144004, [3, -0.144444, 0], [3, 1.18889, 0]], [-0.0308314, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.433333, 4])
        keys.append([[-0.547681, [3, -0.144444, 0], [3, 1.18889, 0]], [0.0174721, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.433333, 4])
        keys.append([[0.999849, [3, -0.144444, 0], [3, 1.18889, 0]], [0.0782677, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[0.720938, [3, -0.0555556, 0], [3, 0.144444, 0]], [0.733209, [3, -0.144444, -0.00498558], [3, 0.0777778, 0.00268454]], [0.743948, [3, -0.0777778, -0.00460214], [3, 0.0777778, 0.00460214]], [0.760822, [3, -0.0777778, 0], [3, 0.1, 0]], [0.760822, [3, -0.1, 0], [3, 0.111111, 0]], [0.760822, [3, -0.111111, 0], [3, 0.0666667, 0]], [0.760822, [3, -0.0666667, 0], [3, 0.0222222, 0]], [0.760822, [3, -0.0222222, 0], [3, 0.111111, 0]], [0.760822, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.760822, [3, -0.0888889, 0], [3, 0.0777778, 0]], [0.760822, [3, -0.0777778, 0], [3, 0.0888889, 0]], [0.760822, [3, -0.0888889, 0], [3, 0.111111, 0]], [0.760822, [3, -0.111111, 0], [3, 0.2, 0]], [1.55604, [3, -0.2, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[0.535324, [3, -0.0555556, 0], [3, 0.144444, 0]], [0.516916, [3, -0.144444, 0], [3, 0.0777778, 0]], [0.516916, [3, -0.0777778, 0], [3, 0.0777778, 0]], [0.501576, [3, -0.0777778, 0], [3, 0.1, 0]], [0.50311, [3, -0.1, 0], [3, 0.111111, 0]], [0.50311, [3, -0.111111, 0], [3, 0.0666667, 0]], [0.50311, [3, -0.0666667, 0], [3, 0.0222222, 0]], [0.50311, [3, -0.0222222, 0], [3, 0.111111, 0]], [0.50311, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.50311, [3, -0.0888889, 0], [3, 0.0777778, 0]], [0.50311, [3, -0.0777778, 0], [3, 0.0888889, 0]], [0.50311, [3, -0.0888889, 0], [3, 0.111111, 0]], [0.50311, [3, -0.111111, 0], [3, 0.2, 0]], [0.363876, [3, -0.2, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.166667, 4])
        keys.append([[-1.01402, [3, -0.0555556, 0], [3, 1.27778, 0]], [-1.02242, [3, -1.27778, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.433333, 4])
        keys.append([[0.0383229, [3, -0.144444, 0], [3, 1.18889, 0]], [-0.0951351, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.433333, 4])
        keys.append([[0.296102, [3, -0.144444, 0], [3, 1.18889, 0]], [0.00451718, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[1.02629, [3, -0.0555556, 0], [3, 0.144444, 0]], [0.523136, [3, -0.144444, 0], [3, 0.0777778, 0]], [1.22264, [3, -0.0777778, 0], [3, 0.0777778, 0]], [0.681137, [3, -0.0777778, 0], [3, 0.1, 0]], [1.11066, [3, -0.1, 0], [3, 0.111111, 0]], [0.656595, [3, -0.111111, 0], [3, 0.0666667, 0]], [1.11066, [3, -0.0666667, 0], [3, 0.0222222, 0]], [0.656595, [3, -0.0222222, 0], [3, 0.111111, 0]], [1.11066, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.656595, [3, -0.0888889, 0], [3, 0.0777778, 0]], [1.11066, [3, -0.0777778, 0], [3, 0.0888889, 0]], [0.656595, [3, -0.0888889, 0], [3, 0.111111, 0]], [1.11066, [3, -0.111111, 0], [3, 0.2, 0]], [0.283869, [3, -0.2, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[0.276078, [3, -0.0555556, 0], [3, 0.144444, 0]], [-0.029188, [3, -0.144444, 0], [3, 0.0777778, 0]], [0.408002, [3, -0.0777778, 0], [3, 0.0777778, 0]], [-0.138102, [3, -0.0777778, 0], [3, 0.1, 0]], [0.391128, [3, -0.1, 0], [3, 0.111111, 0]], [-0.0982179, [3, -0.111111, 0], [3, 0.0666667, 0]], [0.391128, [3, -0.0666667, 0], [3, 0.0222222, 0]], [-0.0982179, [3, -0.0222222, 0], [3, 0.111111, 0]], [0.391128, [3, -0.111111, 0], [3, 0.0888889, 0]], [-0.0982179, [3, -0.0888889, 0], [3, 0.0777778, 0]], [0.391128, [3, -0.0777778, 0], [3, 0.0888889, 0]], [-0.0982179, [3, -0.0888889, 0], [3, 0.111111, 0]], [0.391128, [3, -0.111111, -0.105996], [3, 0.2, 0.190794]], [0.792152, [3, -0.2, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.166667, 0.6, 4])
        keys.append([[0.920751, [3, -0.0555556, 0], [3, 0.144444, 0]], [0.452752, [3, -0.144444, 0], [3, 1.13333, 0]], [0.909692, [3, -1.13333, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.433333, 4])
        keys.append([[-0.125845, [3, -0.144444, 0], [3, 1.18889, 0]], [0.0305574, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.433333, 4])
        keys.append([[-0.309848, [3, -0.144444, 0], [3, 1.18889, 0]], [0.00267122, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.433333, 4])
        keys.append([[0.470523, [3, -0.144444, 0], [3, 1.18889, 0]], [0.0918047, [3, -1.18889, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[0.889762, [3, -0.0555556, 0], [3, 0.144444, 0]], [0.868286, [3, -0.144444, 0], [3, 0.0777778, 0]], [0.92351, [3, -0.0777778, -0.0112495], [3, 0.0777778, 0.0112495]], [0.935783, [3, -0.0777778, 0], [3, 0.1, 0]], [0.89283, [3, -0.1, 0.00552293], [3, 0.111111, -0.00613659]], [0.886694, [3, -0.111111, 0], [3, 0.0666667, 0]], [0.89283, [3, -0.0666667, 0], [3, 0.0222222, 0]], [0.886694, [3, -0.0222222, 0], [3, 0.111111, 0]], [0.89283, [3, -0.111111, 0], [3, 0.0888889, 0]], [0.886694, [3, -0.0888889, 0], [3, 0.0777778, 0]], [0.89283, [3, -0.0777778, 0], [3, 0.0888889, 0]], [0.886694, [3, -0.0888889, 0], [3, 0.111111, 0]], [0.89283, [3, -0.111111, -0.00613659], [3, 0.2, 0.0110459]], [1.55681, [3, -0.2, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.166667, 0.6, 0.833333, 1.06667, 1.36667, 1.7, 1.9, 1.96667, 2.3, 2.56667, 2.8, 3.06667, 3.4, 4])
        keys.append([[-0.181053, [3, -0.0555556, 0], [3, 0.144444, 0]], [-0.101286, [3, -0.144444, -0.0222685], [3, 0.0777778, 0.0119907]], [-0.0782759, [3, -0.0777778, 0], [3, 0.0777778, 0]], [-0.16418, [3, -0.0777778, 0], [3, 0.1, 0]], [-0.075208, [3, -0.1, 0], [3, 0.111111, 0]], [-0.104354, [3, -0.111111, 0], [3, 0.0666667, 0]], [-0.075208, [3, -0.0666667, 0], [3, 0.0222222, 0]], [-0.104354, [3, -0.0222222, 0], [3, 0.111111, 0]], [-0.075208, [3, -0.111111, 0], [3, 0.0888889, 0]], [-0.104354, [3, -0.0888889, 0], [3, 0.0777778, 0]], [-0.075208, [3, -0.0777778, 0], [3, 0.0888889, 0]], [-0.104354, [3, -0.0888889, 0], [3, 0.111111, 0]], [-0.075208, [3, -0.111111, 0], [3, 0.2, 0]], [-0.356235, [3, -0.2, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.166667, 0.6, 4])
        keys.append([[0.96331, [3, -0.0555556, 0], [3, 0.144444, 0]], [0.682588, [3, -0.144444, 0], [3, 1.13333, 0]], [0.964264, [3, -1.13333, 0], [3, 0, 0]]])

        
        motion_proxy.angleInterpolationBezier(names, times, keys)
        
        return ''
	
#Make the robot dance
def armdance():   
        names = list()
        times = list()
        keys = list()
        tts_proxy.say("LET ME SHOW YOU HOW TO DANCE")
        names.append("HeadPitch")
        times.append([0.5, 1, 1.2, 1.5, 1.8, 2.1, 2.6, 3, 3.2, 3.5, 3.8, 4.1, 4.6, 5, 5.2, 5.5, 5.8, 6.1, 6.6, 7, 7.2, 7.5, 7.8, 8.1, 8.6, 10])
        keys.append([[-0.0046272, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.185656, [3, -0.166667, 0], [3, 0.0666667, 0]], [0.0291041, [3, -0.0666667, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0], [3, 0.1, 0]], [0.00149202, [3, -0.1, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0.044486], [3, 0.166667, -0.0741434]], [-0.354396, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.185656, [3, -0.133333, -0.0852223], [3, 0.0666667, 0.0426111]], [0.0291041, [3, -0.0666667, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0], [3, 0.1, 0]], [0.00149202, [3, -0.1, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0.044486], [3, 0.166667, -0.0741434]], [-0.354396, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.185656, [3, -0.133333, -0.0852223], [3, 0.0666667, 0.0426111]], [0.0291041, [3, -0.0666667, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0], [3, 0.1, 0]], [0.00149202, [3, -0.1, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0.044486], [3, 0.166667, -0.0741434]], [-0.354396, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.185656, [3, -0.133333, -0.0852223], [3, 0.0666667, 0.0426111]], [0.0291041, [3, -0.0666667, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0], [3, 0.1, 0]], [0.00149202, [3, -0.1, 0], [3, 0.1, 0]], [-0.185656, [3, -0.1, 0.044486], [3, 0.166667, -0.0741434]], [-0.354396, [3, -0.166667, 0], [3, 0.466667, 0]], [-0.00261907, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([0.5, 1, 1.2, 1.5, 1.8, 2.1, 2.6, 3, 3.2, 3.5, 3.8, 4.1, 4.6, 5, 5.2, 5.5, 5.8, 6.1, 6.6, 7, 7.2, 7.5, 7.8, 8.1, 8.6, 10])
        keys.append([[-0.00354174, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.00157595, [3, -0.166667, 0], [3, 0.0666667, 0]], [-0.00157595, [3, -0.0666667, 0], [3, 0.1, 0]], [0.00609397, [3, -0.1, 0], [3, 0.1, 0]], [-4.19617e-05, [3, -0.1, 0], [3, 0.1, 0]], [0.00609397, [3, -0.1, -0.00613594], [3, 0.166667, 0.0102266]], [0.431013, [3, -0.166667, 0], [3, 0.133333, 0]], [0.00157595, [3, -0.133333, 0], [3, 0.0666667, 0]], [0.00157595, [3, -0.0666667, 0], [3, 0.1, 0]], [-0.00609397, [3, -0.1, 0], [3, 0.1, 0]], [4.19617e-05, [3, -0.1, 0], [3, 0.1, 0]], [-0.00609397, [3, -0.1, 0.00613594], [3, 0.166667, -0.0102266]], [-0.431013, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.00157595, [3, -0.133333, 0], [3, 0.0666667, 0]], [-0.00157595, [3, -0.0666667, 0], [3, 0.1, 0]], [0.00609397, [3, -0.1, 0], [3, 0.1, 0]], [-4.19617e-05, [3, -0.1, 0], [3, 0.1, 0]], [0.00609397, [3, -0.1, -0.00613594], [3, 0.166667, 0.0102266]], [0.431013, [3, -0.166667, 0], [3, 0.133333, 0]], [0.00157595, [3, -0.133333, 0], [3, 0.0666667, 0]], [0.00157595, [3, -0.0666667, 0], [3, 0.1, 0]], [-0.00609397, [3, -0.1, 0], [3, 0.1, 0]], [4.19617e-05, [3, -0.1, 0], [3, 0.1, 0]], [-0.00609397, [3, -0.1, 0.00613594], [3, 0.166667, -0.0102266]], [-0.431013, [3, -0.166667, 0], [3, 0.466667, 0]], [-0.0041901, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.35, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.417291, [3, -0.166667, 0.0357647], [3, 0.233333, -0.0500706]], [-0.607505, [3, -0.233333, 0.0371355], [3, 0.3, -0.0477457]], [-0.671934, [3, -0.3, 0], [3, 0.133333, 0]], [-0.31136, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.443284, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.417291, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.607505, [3, -0.233333, 0.0371355], [3, 0.3, -0.0477457]], [-0.671934, [3, -0.3, 0], [3, 0.133333, 0]], [-0.31136, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.443284, [3, -0.533333, 0], [3, 0.466667, 0]], [-0.344847, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.00902358, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.0858622, [3, -0.166667, 0.0162115], [3, 0.233333, -0.022696]], [-0.125746, [3, -0.233333, 0], [3, 0.3, 0]], [-0.105804, [3, -0.3, 0], [3, 0.133333, 0]], [-0.124296, [3, -0.133333, 0.0139139], [3, 0.533333, -0.0556554]], [-0.314512, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.0858622, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.125746, [3, -0.233333, 0], [3, 0.3, 0]], [-0.105804, [3, -0.3, 0], [3, 0.133333, 0]], [-0.124296, [3, -0.133333, 0.0139139], [3, 0.533333, -0.0556554]], [-0.314512, [3, -0.533333, 0], [3, 0.466667, 0]], [-0.00744537, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[-1.00398, [3, -0.166667, 0], [3, 0.166667, 0]], [-1.24863, [3, -0.166667, 0], [3, 0.0333333, 0]], [-1.07529, [3, -0.0333333, -0.0429523], [3, 0.0333333, 0.0429523]], [-0.990921, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.4005, [3, -0.0333333, 0.0922825], [3, 0.0333333, -0.0922825]], [-1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.39897, [3, -0.0333333, -0.0493303], [3, 0.0333333, 0.0493303]], [-1.24863, [3, -0.0333333, -0.0453384], [3, 0.0666667, 0.0906768]], [-0.990921, [3, -0.0666667, 0], [3, 0.0333333, 0]], [-1.4005, [3, -0.0333333, 0.0922825], [3, 0.0333333, -0.0922825]], [-1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.39897, [3, -0.0333333, -0.0285789], [3, 0.166667, 0.142894]], [-1.0302, [3, -0.166667, 0], [3, 0.133333, 0]], [-1.33309, [3, -0.133333, 0.0552222], [3, 0.0333333, -0.0138056]], [-1.34689, [3, -0.0333333, 0.0138056], [3, 0.0333333, -0.0138056]], [-1.43126, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.31468, [3, -0.0333333, -0.0999658], [3, 0.0333333, 0.0999658]], [-0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.16281, [3, -0.0333333, 0.083603], [3, 0.0333333, -0.083603]], [-1.33309, [3, -0.0333333, 0.0138056], [3, 0.0333333, -0.0138056]], [-1.34689, [3, -0.0333333, 0.0138056], [3, 0.0333333, -0.0138056]], [-1.43126, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.31468, [3, -0.0333333, -0.0999658], [3, 0.0333333, 0.0999658]], [-0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.16281, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.929527, [3, -0.166667, 0], [3, 0.133333, 0]], [-1.24863, [3, -0.133333, 0], [3, 0.0333333, 0]], [-1.07529, [3, -0.0333333, -0.0429523], [3, 0.0333333, 0.0429523]], [-0.990921, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.4005, [3, -0.0333333, 0.0922825], [3, 0.0333333, -0.0922825]], [-1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.39897, [3, -0.0333333, -0.0493303], [3, 0.0333333, 0.0493303]], [-1.24863, [3, -0.0333333, -0.0453384], [3, 0.0666667, 0.0906768]], [-0.990921, [3, -0.0666667, 0], [3, 0.0333333, 0]], [-1.4005, [3, -0.0333333, 0.0922825], [3, 0.0333333, -0.0922825]], [-1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.39897, [3, -0.0333333, -0.0285789], [3, 0.166667, 0.142894]], [-1.0302, [3, -0.166667, 0], [3, 0.133333, 0]], [-1.33309, [3, -0.133333, 0.0552222], [3, 0.0333333, -0.0138056]], [-1.34689, [3, -0.0333333, 0.0138056], [3, 0.0333333, -0.0138056]], [-1.43126, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.31468, [3, -0.0333333, -0.0999658], [3, 0.0333333, 0.0999658]], [-0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.16281, [3, -0.0333333, 0.083603], [3, 0.0333333, -0.083603]], [-1.33309, [3, -0.0333333, 0.0138056], [3, 0.0333333, -0.0138056]], [-1.34689, [3, -0.0333333, 0.0138056], [3, 0.0333333, -0.0138056]], [-1.43126, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.31468, [3, -0.0333333, -0.0999658], [3, 0.0333333, 0.0999658]], [-0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-1.16281, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.929527, [3, -0.166667, 0], [3, 0.466667, 0]], [-1.00802, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[-1.38417, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.434165, [3, -0.166667, -0.296275], [3, 0.0333333, 0.059255]], [-0.31758, [3, -0.0333333, -0.0449974], [3, 0.0333333, 0.0449974]], [-0.16418, [3, -0.0333333, -0.0631497], [3, 0.0333333, 0.0631497]], [0.061318, [3, -0.0333333, -0.0590701], [3, 0.0333333, 0.0590701]], [0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.176453, [3, -0.0333333, 0.104068], [3, 0.0333333, -0.104068]], [-0.434165, [3, -0.0333333, 0], [3, 0.0666667, 0]], [-0.165714, [3, -0.0666667, -0.110107], [3, 0.0333333, 0.0550536]], [0.061318, [3, -0.0333333, -0.0593258], [3, 0.0333333, 0.0593258]], [0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.176453, [3, -0.0333333, 0.107026], [3, 0.166667, -0.535128]], [-1.73622, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.185572, [3, -0.133333, -0.165672], [3, 0.0333333, 0.041418]], [-0.144154, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.174835, [3, -0.0333333, 0.0306808], [3, 0.0333333, -0.0306808]], [-0.351244, [3, -0.0333333, 0.0452529], [3, 0.0333333, -0.0452529]], [-0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.036858, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.185572, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.144154, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.176367, [3, -0.0333333, 0.0322132], [3, 0.0333333, -0.0322132]], [-0.351244, [3, -0.0333333, 0.0449975], [3, 0.0333333, -0.0449975]], [-0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.036858, [3, -0.0333333, -0.0457293], [3, 0.166667, 0.228646]], [0.376775, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.434165, [3, -0.133333, 0], [3, 0.0333333, 0]], [-0.31758, [3, -0.0333333, -0.0449974], [3, 0.0333333, 0.0449974]], [-0.16418, [3, -0.0333333, -0.0631497], [3, 0.0333333, 0.0631497]], [0.061318, [3, -0.0333333, -0.0590701], [3, 0.0333333, 0.0590701]], [0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.176453, [3, -0.0333333, 0.104068], [3, 0.0333333, -0.104068]], [-0.434165, [3, -0.0333333, 0], [3, 0.0666667, 0]], [-0.165714, [3, -0.0666667, -0.110107], [3, 0.0333333, 0.0550536]], [0.061318, [3, -0.0333333, -0.0593258], [3, 0.0333333, 0.0593258]], [0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.176453, [3, -0.0333333, 0.107026], [3, 0.166667, -0.535128]], [-1.73622, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.185572, [3, -0.133333, -0.165672], [3, 0.0333333, 0.041418]], [-0.144154, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.174835, [3, -0.0333333, 0.0306808], [3, 0.0333333, -0.0306808]], [-0.351244, [3, -0.0333333, 0.0452529], [3, 0.0333333, -0.0452529]], [-0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.036858, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.185572, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.144154, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.176367, [3, -0.0333333, 0.0322132], [3, 0.0333333, -0.0322132]], [-0.351244, [3, -0.0333333, 0.0449975], [3, 0.0333333, -0.0449975]], [-0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.036858, [3, -0.0333333, -0.0457293], [3, 0.166667, 0.228646]], [0.376775, [3, -0.166667, 0], [3, 0.466667, 0]], [-1.38515, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[0.251572, [3, -0.166667, 0], [3, 0.166667, 0]], [0, [3, -0.166667, 0], [3, 0.0333333, 0]], [0.1872, [3, -0.0333333, -0.000799999], [3, 0.0333333, 0.000799999]], [0.188, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.188, [3, -0.0666667, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, -0.0554293], [3, 0.166667, 0.277147]], [0.997728, [3, -0.166667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.1568, [3, -0.0333333, -0.0212], [3, 0.0333333, 0.0212]], [0.178, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0.000399992], [3, 0.0333333, -0.000399992]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1568, [3, -0.0333333, -0.0212], [3, 0.0333333, 0.0212]], [0.178, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0], [3, 0.166667, 0]], [1, [3, -0.166667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.1872, [3, -0.0333333, -0.000799999], [3, 0.0333333, 0.000799999]], [0.188, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.188, [3, -0.0666667, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, -0.0554293], [3, 0.166667, 0.277147]], [0.997728, [3, -0.166667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.1568, [3, -0.0333333, -0.0212], [3, 0.0333333, 0.0212]], [0.178, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0.000399992], [3, 0.0333333, -0.000399992]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1568, [3, -0.0333333, -0.0212], [3, 0.0333333, 0.0212]], [0.178, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0], [3, 0.166667, 0]], [1, [3, -0.166667, 0], [3, 0.466667, 0]], [0.259178, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.45, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.052114, [3, -0.166667, 0], [3, 0.233333, 0]], [-0.33437, [3, -0.233333, 0.0516766], [3, 0.3, -0.0664414]], [-0.406468, [3, -0.3, 0], [3, 0.133333, 0]], [-0.0767419, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.104354, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.052114, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.33437, [3, -0.233333, 0.0516766], [3, 0.3, -0.0664414]], [-0.406468, [3, -0.3, 0], [3, 0.133333, 0]], [-0.0767419, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.104354, [3, -0.533333, 0.027612], [3, 0.466667, -0.0241605]], [-0.443326, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[0.00159365, [3, -0.166667, 0], [3, 0.166667, 0]], [0.1335, [3, -0.166667, -0.0240729], [3, 0.233333, 0.0337021]], [0.174919, [3, -0.233333, -0.0208048], [3, 0.3, 0.0267491]], [0.276162, [3, -0.3, 0], [3, 0.133333, 0]], [0.128814, [3, -0.133333, 0], [3, 0.533333, 0]], [0.208583, [3, -0.533333, 0], [3, 0.133333, 0]], [0.1335, [3, -0.133333, 0], [3, 0.233333, 0]], [0.174919, [3, -0.233333, -0.0208048], [3, 0.3, 0.0267491]], [0.276162, [3, -0.3, 0], [3, 0.133333, 0]], [0.128814, [3, -0.133333, 0], [3, 0.533333, 0]], [0.208583, [3, -0.533333, 0], [3, 0.466667, 0]], [0.00755153, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.00420801, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.36505, [3, -0.166667, 0.00986112], [3, 0.233333, -0.0138056]], [-0.378855, [3, -0.233333, 0], [3, 0.3, 0]], [-0.371186, [3, -0.3, -0.0031859], [3, 0.133333, 0.00141596]], [-0.36505, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.371186, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.36505, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.378855, [3, -0.233333, 0], [3, 0.3, 0]], [-0.371186, [3, -0.3, -0.0031859], [3, 0.133333, 0.00141596]], [-0.36505, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.371186, [3, -0.533333, 0], [3, 0.466667, 0]], [0, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[0.699999, [3, -0.166667, 0], [3, 0.166667, 0]], [0.731677, [3, -0.166667, -0.0316778], [3, 0.233333, 0.0443489]], [1.13358, [3, -0.233333, -0.0829957], [3, 0.3, 0.106709]], [1.30079, [3, -0.3, 0], [3, 0.133333, 0]], [0.653526, [3, -0.133333, 0], [3, 0.533333, 0]], [0.856014, [3, -0.533333, 0], [3, 0.133333, 0]], [0.731677, [3, -0.133333, 0], [3, 0.233333, 0]], [1.13358, [3, -0.233333, -0.0829957], [3, 0.3, 0.106709]], [1.30079, [3, -0.3, 0], [3, 0.133333, 0]], [0.653526, [3, -0.133333, 0], [3, 0.533333, 0]], [0.856014, [3, -0.533333, 0], [3, 0.466667, 0]], [0.691105, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[1.40432, [3, -0.166667, 0], [3, 0.166667, 0]], [0.357381, [3, -0.166667, 0], [3, 0.0333333, 0]], [0.510779, [3, -0.0333333, -0.0378384], [3, 0.0333333, 0.0378384]], [0.584411, [3, -0.0333333, -0.0158514], [3, 0.0333333, 0.0158514]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, -0.0426919], [3, 0.0333333, 0.0426919]], [0.357381, [3, -0.0333333, -0.0335774], [3, 0.0666667, 0.0671548]], [0.584411, [3, -0.0666667, -0.0429527], [3, 0.0333333, 0.0214763]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.583692, [3, -0.166667, 0], [3, 0.133333, 0]], [0.624379, [3, -0.133333, -0.35406], [3, 0.0333333, 0.088515]], [0.744032, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.510865, [3, -0.0333333, 0.0723538], [3, 0.0333333, -0.0723538]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.624379, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.744032, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.510865, [3, -0.0333333, 0.0723538], [3, 0.0333333, -0.0723538]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.708379, [3, -0.166667, 0.0172456], [3, 0.133333, -0.0137965]], [0.357381, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.510779, [3, -0.0333333, -0.0378384], [3, 0.0333333, 0.0378384]], [0.584411, [3, -0.0333333, -0.0158514], [3, 0.0333333, 0.0158514]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, -0.0426919], [3, 0.0333333, 0.0426919]], [0.357381, [3, -0.0333333, -0.0335774], [3, 0.0666667, 0.0671548]], [0.584411, [3, -0.0666667, -0.0429527], [3, 0.0333333, 0.0214763]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.583692, [3, -0.166667, 0], [3, 0.133333, 0]], [0.624379, [3, -0.133333, -0.35406], [3, 0.0333333, 0.088515]], [0.744032, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.510865, [3, -0.0333333, 0.0723538], [3, 0.0333333, -0.0723538]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.624379, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.744032, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.510865, [3, -0.0333333, 0.0723538], [3, 0.0333333, -0.0723538]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.708379, [3, -0.166667, 0], [3, 0.466667, 0]], [1.40104, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[0.293252, [3, -0.166667, 0], [3, 0.166667, 0]], [0.159494, [3, -0.166667, 0.0422683], [3, 0.0333333, -0.00845366]], [0.141086, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.151824, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.0889301, [3, -0.0333333, 0.0404302], [3, 0.0333333, -0.0404302]], [-0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.066004, [3, -0.0333333, -0.0247531], [3, 0.0333333, 0.0247531]], [0.159494, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.151824, [3, -0.0666667, 0.00767004], [3, 0.0333333, -0.00383502]], [0.0889301, [3, -0.0333333, 0.0404302], [3, 0.0333333, -0.0404302]], [-0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.066004, [3, -0.0333333, -0.0247531], [3, 0.166667, 0.123766]], [0.536495, [3, -0.166667, 0], [3, 0.133333, 0]], [0.0337899, [3, -0.133333, 0.186824], [3, 0.0333333, -0.0467061]], [-0.164096, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.124212, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0843279, [3, -0.0333333, -0.0217316], [3, 0.0333333, 0.0217316]], [-0.052114, [3, -0.0333333, -0.0196863], [3, 0.0333333, 0.0196863]], [0.0337899, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.164096, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.124212, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0843279, [3, -0.0333333, -0.0217316], [3, 0.0333333, 0.0217316]], [-0.052114, [3, -0.0333333, -0.0157946], [3, 0.166667, 0.0789729]], [0.199975, [3, -0.166667, 0], [3, 0.133333, 0]], [0.159494, [3, -0.133333, 0.0157036], [3, 0.0333333, -0.0039259]], [0.141086, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.151824, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.0889301, [3, -0.0333333, 0.0404302], [3, 0.0333333, -0.0404302]], [-0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.066004, [3, -0.0333333, -0.0247531], [3, 0.0333333, 0.0247531]], [0.159494, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.151824, [3, -0.0666667, 0.00767004], [3, 0.0333333, -0.00383502]], [0.0889301, [3, -0.0333333, 0.0404302], [3, 0.0333333, -0.0404302]], [-0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.066004, [3, -0.0333333, -0.0247531], [3, 0.166667, 0.123766]], [0.536495, [3, -0.166667, 0], [3, 0.133333, 0]], [0.0337899, [3, -0.133333, 0.186824], [3, 0.0333333, -0.0467061]], [-0.164096, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.124212, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0843279, [3, -0.0333333, -0.0217316], [3, 0.0333333, 0.0217316]], [-0.052114, [3, -0.0333333, -0.0196863], [3, 0.0333333, 0.0196863]], [0.0337899, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.164096, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.124212, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0843279, [3, -0.0333333, -0.0217316], [3, 0.0333333, 0.0217316]], [-0.052114, [3, -0.0333333, -0.0157946], [3, 0.166667, 0.0789729]], [0.199975, [3, -0.166667, -0.030547], [3, 0.466667, 0.0855317]], [0.296122, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[-0.0064736, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.573758, [3, -0.166667, 0.169084], [3, 0.0333333, -0.0338168]], [-0.615176, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.412688, [3, -0.0333333, -0.0700526], [3, 0.0333333, 0.0700526]], [-0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.763974, [3, -0.0333333, -0.0646531], [3, 0.0333333, 0.0646531]], [-0.573758, [3, -0.0333333, -0.0390318], [3, 0.0666667, 0.0780635]], [-0.412688, [3, -0.0666667, -0.0841993], [3, 0.0333333, 0.0420997]], [-0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.763974, [3, -0.0333333, -0.122614], [3, 0.166667, 0.613071]], [1.24538, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.421808, [3, -0.133333, 0], [3, 0.0333333, 0]], [-0.409536, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.46476, [3, -0.0333333, 0.0127834], [3, 0.0333333, -0.0127834]], [-0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.472429, [3, -0.0333333, -0.0138073], [3, 0.0333333, 0.0138073]], [-0.131882, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.421808, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.409536, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.46476, [3, -0.0333333, 0.0127834], [3, 0.0333333, -0.0127834]], [-0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.472429, [3, -0.0333333, -0.0138073], [3, 0.0333333, 0.0138073]], [-0.131882, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.574861, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.573758, [3, -0.133333, 0], [3, 0.0333333, 0]], [-0.615176, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.412688, [3, -0.0333333, -0.0700526], [3, 0.0333333, 0.0700526]], [-0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.763974, [3, -0.0333333, -0.0646531], [3, 0.0333333, 0.0646531]], [-0.573758, [3, -0.0333333, -0.0390318], [3, 0.0666667, 0.0780635]], [-0.412688, [3, -0.0666667, -0.0841993], [3, 0.0333333, 0.0420997]], [-0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.763974, [3, -0.0333333, -0.122614], [3, 0.166667, 0.613071]], [1.24538, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.421808, [3, -0.133333, 0], [3, 0.0333333, 0]], [-0.409536, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.46476, [3, -0.0333333, 0.0127834], [3, 0.0333333, -0.0127834]], [-0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.472429, [3, -0.0333333, -0.0138073], [3, 0.0333333, 0.0138073]], [-0.131882, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.421808, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.409536, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.46476, [3, -0.0333333, 0.0127834], [3, 0.0333333, -0.0127834]], [-0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.472429, [3, -0.0333333, -0.0138073], [3, 0.0333333, 0.0138073]], [-0.131882, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.574861, [3, -0.166667, 0], [3, 0.466667, 0]], [0.00759608, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.35, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.31136, [3, -0.166667, 0], [3, 0.233333, 0]], [-0.355846, [3, -0.233333, 0.0192389], [3, 0.3, -0.0247358]], [-0.443284, [3, -0.3, 0], [3, 0.133333, 0]], [-0.417291, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.671934, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.31136, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.355846, [3, -0.233333, 0.0192389], [3, 0.3, -0.0247358]], [-0.443284, [3, -0.3, 0], [3, 0.133333, 0]], [-0.417291, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.671934, [3, -0.533333, 0], [3, 0.466667, 0]], [-0.34488, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[0.00303459, [3, -0.166667, 0], [3, 0.166667, 0]], [0.124296, [3, -0.166667, -0.0142444], [3, 0.233333, 0.0199421]], [0.144238, [3, -0.233333, -0.0199421], [3, 0.3, 0.0256399]], [0.314512, [3, -0.3, 0], [3, 0.133333, 0]], [0.0858622, [3, -0.133333, 0], [3, 0.533333, 0]], [0.105804, [3, -0.533333, -0.010249], [3, 0.133333, 0.00256225]], [0.124296, [3, -0.133333, -0.00465867], [3, 0.233333, 0.00815268]], [0.144238, [3, -0.233333, -0.0199421], [3, 0.3, 0.0256399]], [0.314512, [3, -0.3, 0], [3, 0.133333, 0]], [0.0858622, [3, -0.133333, 0], [3, 0.533333, 0]], [0.105804, [3, -0.533333, 0], [3, 0.466667, 0]], [0.000827394, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[1.00348, [3, -0.166667, 0], [3, 0.166667, 0]], [1.33309, [3, -0.166667, -0.0690278], [3, 0.0333333, 0.0138056]], [1.34689, [3, -0.0333333, -0.0138056], [3, 0.0333333, 0.0138056]], [1.43126, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.31468, [3, -0.0333333, 0.0999658], [3, 0.0333333, -0.0999658]], [0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.16281, [3, -0.0333333, -0.083603], [3, 0.0333333, 0.083603]], [1.33309, [3, -0.0333333, -0.0298279], [3, 0.0666667, 0.0596558]], [1.43126, [3, -0.0666667, 0], [3, 0.0333333, 0]], [1.31468, [3, -0.0333333, 0.0999658], [3, 0.0333333, -0.0999658]], [0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.16281, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.9362, [3, -0.166667, 0], [3, 0.133333, 0]], [1.24863, [3, -0.133333, 0], [3, 0.0333333, 0]], [1.07529, [3, -0.0333333, 0.0429523], [3, 0.0333333, -0.0429523]], [0.990921, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.4005, [3, -0.0333333, -0.0922825], [3, 0.0333333, 0.0922825]], [1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.39897, [3, -0.0333333, 0.0493303], [3, 0.0333333, -0.0493303]], [1.24863, [3, -0.0333333, 0.0539458], [3, 0.0333333, -0.0539458]], [1.07529, [3, -0.0333333, 0.0429523], [3, 0.0333333, -0.0429523]], [0.990921, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.4005, [3, -0.0333333, -0.0922825], [3, 0.0333333, 0.0922825]], [1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.39897, [3, -0.0333333, 0.0562086], [3, 0.166667, -0.281043]], [0.532861, [3, -0.166667, 0], [3, 0.133333, 0]], [1.33309, [3, -0.133333, -0.0552222], [3, 0.0333333, 0.0138056]], [1.34689, [3, -0.0333333, -0.0138056], [3, 0.0333333, 0.0138056]], [1.43126, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.31468, [3, -0.0333333, 0.0999658], [3, 0.0333333, -0.0999658]], [0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.16281, [3, -0.0333333, -0.083603], [3, 0.0333333, 0.083603]], [1.33309, [3, -0.0333333, -0.0298279], [3, 0.0666667, 0.0596558]], [1.43126, [3, -0.0666667, 0], [3, 0.0333333, 0]], [1.31468, [3, -0.0333333, 0.0999658], [3, 0.0333333, -0.0999658]], [0.83147, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.16281, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.9362, [3, -0.166667, 0], [3, 0.133333, 0]], [1.24863, [3, -0.133333, 0], [3, 0.0333333, 0]], [1.07529, [3, -0.0333333, 0.0429523], [3, 0.0333333, -0.0429523]], [0.990921, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.4005, [3, -0.0333333, -0.0922825], [3, 0.0333333, 0.0922825]], [1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.39897, [3, -0.0333333, 0.0493303], [3, 0.0333333, -0.0493303]], [1.24863, [3, -0.0333333, 0.0539458], [3, 0.0333333, -0.0539458]], [1.07529, [3, -0.0333333, 0.0429523], [3, 0.0333333, -0.0429523]], [0.990921, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.4005, [3, -0.0333333, -0.0922825], [3, 0.0333333, 0.0922825]], [1.54462, [3, -0.0333333, 0], [3, 0.0333333, 0]], [1.39897, [3, -0.0333333, 0.0562086], [3, 0.166667, -0.281043]], [0.532861, [3, -0.166667, 0], [3, 0.466667, 0]], [1.00797, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[1.38479, [3, -0.166667, 0], [3, 0.166667, 0]], [0.185572, [3, -0.166667, 0.20709], [3, 0.0333333, -0.041418]], [0.144154, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.174835, [3, -0.0333333, -0.0306808], [3, 0.0333333, 0.0306808]], [0.351244, [3, -0.0333333, -0.0452529], [3, 0.0333333, 0.0452529]], [0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.036858, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.185572, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.176367, [3, -0.0666667, 0], [3, 0.0333333, 0]], [0.351244, [3, -0.0333333, -0.0449975], [3, 0.0333333, 0.0449975]], [0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.036858, [3, -0.0333333, 0.0459114], [3, 0.166667, -0.229557]], [-0.380052, [3, -0.166667, 0], [3, 0.133333, 0]], [0.434165, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.31758, [3, -0.0333333, 0.0449974], [3, 0.0333333, -0.0449974]], [0.16418, [3, -0.0333333, 0.0631497], [3, 0.0333333, -0.0631497]], [-0.061318, [3, -0.0333333, 0.0590701], [3, 0.0333333, -0.0590701]], [-0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.176453, [3, -0.0333333, -0.104068], [3, 0.0333333, 0.104068]], [0.434165, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.31758, [3, -0.0333333, 0.0447418], [3, 0.0333333, -0.0447418]], [0.165714, [3, -0.0333333, 0.0631497], [3, 0.0333333, -0.0631497]], [-0.061318, [3, -0.0333333, 0.0593258], [3, 0.0333333, -0.0593258]], [-0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.176453, [3, -0.0333333, -0.108634], [3, 0.166667, 0.543171]], [1.76517, [3, -0.166667, 0], [3, 0.133333, 0]], [0.185572, [3, -0.133333, 0.165672], [3, 0.0333333, -0.041418]], [0.144154, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.174835, [3, -0.0333333, -0.0306808], [3, 0.0333333, 0.0306808]], [0.351244, [3, -0.0333333, -0.0452529], [3, 0.0333333, 0.0452529]], [0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.036858, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.185572, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.176367, [3, -0.0666667, 0], [3, 0.0333333, 0]], [0.351244, [3, -0.0333333, -0.0449975], [3, 0.0333333, 0.0449975]], [0.446352, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.036858, [3, -0.0333333, 0.0459114], [3, 0.166667, -0.229557]], [-0.380052, [3, -0.166667, 0], [3, 0.133333, 0]], [0.434165, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.31758, [3, -0.0333333, 0.0449974], [3, 0.0333333, -0.0449974]], [0.16418, [3, -0.0333333, 0.0631497], [3, 0.0333333, -0.0631497]], [-0.061318, [3, -0.0333333, 0.0590701], [3, 0.0333333, -0.0590701]], [-0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.176453, [3, -0.0333333, -0.104068], [3, 0.0333333, 0.104068]], [0.434165, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.31758, [3, -0.0333333, 0.0447418], [3, 0.0333333, -0.0447418]], [0.165714, [3, -0.0333333, 0.0631497], [3, 0.0333333, -0.0631497]], [-0.061318, [3, -0.0333333, 0.0593258], [3, 0.0333333, -0.0593258]], [-0.190241, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.176453, [3, -0.0333333, -0.108634], [3, 0.166667, 0.543171]], [1.76517, [3, -0.166667, 0], [3, 0.466667, 0]], [1.38466, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[0.251513, [3, -0.166667, 0], [3, 0.166667, 0]], [0, [3, -0.166667, 0], [3, 0.0333333, 0]], [0.1568, [3, -0.0333333, -0.0212], [3, 0.0333333, 0.0212]], [0.178, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0.000399992], [3, 0.0333333, -0.000399992]], [0, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.178, [3, -0.0666667, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.996256, [3, -0.166667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.1872, [3, -0.0333333, -0.000799999], [3, 0.0333333, 0.000799999]], [0.188, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1872, [3, -0.0333333, -0.000799999], [3, 0.0333333, 0.000799999]], [0.188, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, -0.0555556], [3, 0.166667, 0.277778]], [1, [3, -0.166667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.1568, [3, -0.0333333, -0.0212], [3, 0.0333333, 0.0212]], [0.178, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0.000399992], [3, 0.0333333, -0.000399992]], [0, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.178, [3, -0.0666667, 0], [3, 0.0333333, 0]], [0.1616, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1672, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1668, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.996256, [3, -0.166667, 0], [3, 0.133333, 0]], [0, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.1872, [3, -0.0333333, -0.000799999], [3, 0.0333333, 0.000799999]], [0.188, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1872, [3, -0.0333333, -0.000799999], [3, 0.0333333, 0.000799999]], [0.188, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.184, [3, -0.0333333, 0.00399999], [3, 0.0333333, -0.00399999]], [0, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.1908, [3, -0.0333333, -0.0555556], [3, 0.166667, 0.277778]], [1, [3, -0.166667, 0], [3, 0.466667, 0]], [0.25, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.45, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.0767419, [3, -0.166667, 0], [3, 0.233333, 0]], [-0.44797, [3, -0.233333, 0], [3, 0.3, 0]], [-0.104354, [3, -0.3, -0.0913514], [3, 0.133333, 0.0406006]], [-0.052114, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.406468, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.0767419, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.44797, [3, -0.233333, 0], [3, 0.3, 0]], [-0.104354, [3, -0.3, -0.0913514], [3, 0.133333, 0.0406006]], [-0.052114, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.406468, [3, -0.533333, 0.0422234], [3, 0.466667, -0.0369455]], [-0.443413, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.00288084, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.128814, [3, -0.166667, 0], [3, 0.233333, 0]], [-0.108872, [3, -0.233333, 0], [3, 0.3, 0]], [-0.208583, [3, -0.3, 0], [3, 0.133333, 0]], [-0.1335, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.276162, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.128814, [3, -0.133333, -0.0113955], [3, 0.233333, 0.0199421]], [-0.108872, [3, -0.233333, 0], [3, 0.3, 0]], [-0.208583, [3, -0.3, 0], [3, 0.133333, 0]], [-0.1335, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.276162, [3, -0.533333, 0], [3, 0.466667, 0]], [-0.000705859, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[-0.00420801, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.36505, [3, -0.166667, 0.00986112], [3, 0.233333, -0.0138056]], [-0.378855, [3, -0.233333, 0], [3, 0.3, 0]], [-0.371186, [3, -0.3, -0.0031859], [3, 0.133333, 0.00141596]], [-0.36505, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.371186, [3, -0.533333, 0], [3, 0.133333, 0]], [-0.36505, [3, -0.133333, 0], [3, 0.233333, 0]], [-0.378855, [3, -0.233333, 0], [3, 0.3, 0]], [-0.371186, [3, -0.3, -0.0031859], [3, 0.133333, 0.00141596]], [-0.36505, [3, -0.133333, 0], [3, 0.533333, 0]], [-0.371186, [3, -0.533333, 0], [3, 0.466667, 0]], [0, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.5, 1, 1.7, 2.6, 3, 4.6, 5, 5.7, 6.6, 7, 8.6, 10])
        keys.append([[0.699999, [3, -0.166667, 0], [3, 0.166667, 0]], [0.653526, [3, -0.166667, 0], [3, 0.233333, 0]], [1.00481, [3, -0.233333, 0], [3, 0.3, 0]], [0.856014, [3, -0.3, 0.0630312], [3, 0.133333, -0.0280139]], [0.731677, [3, -0.133333, 0], [3, 0.533333, 0]], [1.30079, [3, -0.533333, 0], [3, 0.133333, 0]], [0.653526, [3, -0.133333, 0], [3, 0.233333, 0]], [1.00481, [3, -0.233333, 0], [3, 0.3, 0]], [0.856014, [3, -0.3, 0.0630312], [3, 0.133333, -0.0280139]], [0.731677, [3, -0.133333, 0], [3, 0.533333, 0]], [1.30079, [3, -0.533333, 0], [3, 0.466667, 0]], [0.691105, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[1.40843, [3, -0.166667, 0], [3, 0.166667, 0]], [0.624379, [3, -0.166667, 0], [3, 0.0333333, 0]], [0.744032, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.510865, [3, -0.0333333, 0.0723538], [3, 0.0333333, -0.0723538]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.624379, [3, -0.0333333, 0.0238621], [3, 0.0666667, -0.0477243]], [0.510865, [3, -0.0666667, 0.0698822], [3, 0.0333333, -0.0349411]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.705232, [3, -0.166667, 0.0203924], [3, 0.133333, -0.0163139]], [0.357381, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.510779, [3, -0.0333333, -0.0378384], [3, 0.0333333, 0.0378384]], [0.584411, [3, -0.0333333, -0.0158514], [3, 0.0333333, 0.0158514]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, -0.0426919], [3, 0.0333333, 0.0426919]], [0.357381, [3, -0.0333333, -0.0380941], [3, 0.0333333, 0.0380941]], [0.510779, [3, -0.0333333, -0.0378384], [3, 0.0333333, 0.0378384]], [0.584411, [3, -0.0333333, -0.0158514], [3, 0.0333333, 0.0158514]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.578744, [3, -0.166667, 0], [3, 0.133333, 0]], [0.624379, [3, -0.133333, -0.35274], [3, 0.0333333, 0.0881851]], [0.744032, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.510865, [3, -0.0333333, 0.0723538], [3, 0.0333333, -0.0723538]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.624379, [3, -0.0333333, 0.0238621], [3, 0.0666667, -0.0477243]], [0.510865, [3, -0.0666667, 0.0698822], [3, 0.0333333, -0.0349411]], [0.309909, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.61671, [3, -0.0333333, -0.0692858], [3, 0.0333333, 0.0692858]], [0.725624, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.705232, [3, -0.166667, 0.0203924], [3, 0.133333, -0.0163139]], [0.357381, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.510779, [3, -0.0333333, -0.0378384], [3, 0.0333333, 0.0378384]], [0.584411, [3, -0.0333333, -0.0158514], [3, 0.0333333, 0.0158514]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, -0.0426919], [3, 0.0333333, 0.0426919]], [0.357381, [3, -0.0333333, -0.0380941], [3, 0.0333333, 0.0380941]], [0.510779, [3, -0.0333333, -0.0378384], [3, 0.0333333, 0.0378384]], [0.584411, [3, -0.0333333, -0.0158514], [3, 0.0333333, 0.0158514]], [0.605888, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.101229, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.282215, [3, -0.0333333, 0], [3, 0.166667, 0]], [-0.578744, [3, -0.166667, 0], [3, 0.466667, 0]], [1.40094, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[-0.297629, [3, -0.166667, 0], [3, 0.166667, 0]], [-0.0337899, [3, -0.166667, -0.128257], [3, 0.0333333, 0.0256514]], [0.164096, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.124212, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.0843279, [3, -0.0333333, 0.0217316], [3, 0.0333333, -0.0217316]], [0.052114, [3, -0.0333333, 0.0196863], [3, 0.0333333, -0.0196863]], [-0.0337899, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.124212, [3, -0.0666667, -0.0480653], [3, 0.0333333, 0.0240326]], [0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.0843279, [3, -0.0333333, 0.0217316], [3, 0.0333333, -0.0217316]], [0.052114, [3, -0.0333333, 0.015521], [3, 0.166667, -0.0776052]], [-0.195051, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.159494, [3, -0.133333, -0.0143906], [3, 0.0333333, 0.00359766]], [-0.141086, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.151824, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0889301, [3, -0.0333333, -0.0404302], [3, 0.0333333, 0.0404302]], [0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.066004, [3, -0.0333333, 0.0247531], [3, 0.0333333, -0.0247531]], [-0.159494, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.141086, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.151824, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0889301, [3, -0.0333333, -0.0404302], [3, 0.0333333, 0.0404302]], [0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.066004, [3, -0.0333333, 0.0205304], [3, 0.166667, -0.102652]], [-0.27879, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.0337899, [3, -0.133333, -0.118103], [3, 0.0333333, 0.0295257]], [0.164096, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.124212, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.0843279, [3, -0.0333333, 0.0217316], [3, 0.0333333, -0.0217316]], [0.052114, [3, -0.0333333, 0.0196863], [3, 0.0333333, -0.0196863]], [-0.0337899, [3, -0.0333333, 0], [3, 0.0666667, 0]], [0.124212, [3, -0.0666667, -0.0480653], [3, 0.0333333, 0.0240326]], [0.182504, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.0843279, [3, -0.0333333, 0.0217316], [3, 0.0333333, -0.0217316]], [0.052114, [3, -0.0333333, 0.015521], [3, 0.166667, -0.0776052]], [-0.195051, [3, -0.166667, 0], [3, 0.133333, 0]], [-0.159494, [3, -0.133333, -0.0143906], [3, 0.0333333, 0.00359766]], [-0.141086, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.151824, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0889301, [3, -0.0333333, -0.0404302], [3, 0.0333333, 0.0404302]], [0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.066004, [3, -0.0333333, 0.0247531], [3, 0.0333333, -0.0247531]], [-0.159494, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.141086, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.151824, [3, -0.0333333, 0], [3, 0.0333333, 0]], [-0.0889301, [3, -0.0333333, -0.0404302], [3, 0.0333333, 0.0404302]], [0.0907571, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.066004, [3, -0.0333333, 0.0205304], [3, 0.166667, -0.102652]], [-0.27879, [3, -0.166667, 0.00570368], [3, 0.466667, -0.0159703]], [-0.29476, [3, -0.466667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.5, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.8, 1.9, 2, 2.1, 2.6, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.1, 4.6, 5, 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.8, 5.9, 6, 6.1, 6.6, 7, 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8, 8.1, 8.6, 10])
        keys.append([[-0.00104124, [3, -0.166667, 0], [3, 0.166667, 0]], [0.421808, [3, -0.166667, 0], [3, 0.0333333, 0]], [0.409536, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.46476, [3, -0.0333333, -0.0127834], [3, 0.0333333, 0.0127834]], [0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.472429, [3, -0.0333333, 0.0138073], [3, 0.0333333, -0.0138073]], [0.131882, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.421808, [3, -0.0333333, -0.0214763], [3, 0.0666667, 0.0429525]], [0.46476, [3, -0.0666667, -0.0143175], [3, 0.0333333, 0.00715876]], [0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.472429, [3, -0.0333333, 0.0138073], [3, 0.0333333, -0.0138073]], [0.131882, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.578728, [3, -0.166667, 0], [3, 0.133333, 0]], [0.573758, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.615176, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.412688, [3, -0.0333333, 0.0700526], [3, 0.0333333, -0.0700526]], [0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.763974, [3, -0.0333333, 0.0646531], [3, 0.0333333, -0.0646531]], [0.573758, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.615176, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.412688, [3, -0.0333333, 0.0700526], [3, 0.0333333, -0.0700526]], [0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.763974, [3, -0.0333333, 0.088914], [3, 0.166667, -0.44457]], [-0.638775, [3, -0.166667, 0], [3, 0.133333, 0]], [0.421808, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.409536, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.46476, [3, -0.0333333, -0.0127834], [3, 0.0333333, 0.0127834]], [0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.472429, [3, -0.0333333, 0.0138073], [3, 0.0333333, -0.0138073]], [0.131882, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.421808, [3, -0.0333333, -0.0214763], [3, 0.0666667, 0.0429525]], [0.46476, [3, -0.0666667, -0.0143175], [3, 0.0333333, 0.00715876]], [0.486237, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.472429, [3, -0.0333333, 0.0138073], [3, 0.0333333, -0.0138073]], [0.131882, [3, -0.0333333, 0], [3, 0.166667, 0]], [0.578728, [3, -0.166667, 0], [3, 0.133333, 0]], [0.573758, [3, -0.133333, 0], [3, 0.0333333, 0]], [0.615176, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.412688, [3, -0.0333333, 0.0700526], [3, 0.0333333, -0.0700526]], [0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.763974, [3, -0.0333333, 0.0646531], [3, 0.0333333, -0.0646531]], [0.573758, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.615176, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.412688, [3, -0.0333333, 0.0700526], [3, 0.0333333, -0.0700526]], [0.194861, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.961676, [3, -0.0333333, 0], [3, 0.0333333, 0]], [0.763974, [3, -0.0333333, 0.088914], [3, 0.166667, -0.44457]], [-0.638775, [3, -0.166667, 0], [3, 0.466667, 0]], [0.000398923, [3, -0.466667, 0], [3, 0, 0]]])
        motion_proxy.angleInterpolationBezier(names, times, keys)   
        return ''

#The host device recognises speech and does corresponding actions
@app.route('/listen')
def listen():               
    # Set up speech recognition
    nao = AssistentAgent('192.168.196.40', port)
    command = nao.speech_recognize(1.0).lower()
    head_pitch_angle = 0.5 
    head_yaw_angle=0.5
    if str(command)=='how to play guitar':
        newdance()
    elif str(command)=='joke':
        jokeapi()
    elif str(command)=='how to dance':
        armdance()
    elif str(command)=='left':
        motion_proxy.setAngles("HeadYaw", head_yaw_angle, 0.1)
        motion_proxy.waitUntilMoveIsFinished()
    elif str(command)=='right':
        motion_proxy.setAngles("HeadYaw", -head_yaw_angle, 0.1)
        motion_proxy.waitUntilMoveIsFinished()
    elif str(command)=='look up':
        motion_proxy.setAngles("HeadPitch", -head_pitch_angle, 0.1)
        motion_proxy.waitUntilMoveIsFinished()
    elif str(command)=='look down':
        motion_proxy.setAngles("HeadPitch", head_pitch_angle, 0.1)
        motion_proxy.waitUntilMoveIsFinished()
    elif str(command)=='review':
        tts_proxy.say('GOOD EVENING TO EVERYONE PRESENT HERE. MY NAME IS NAY OH. I HAVE BEEN WORKING WITH THE GROUP FOR THE PAST YEAR. THE GROUP HAS WORKED WITH NAY OH AND HAS BUILT A WEB APPLICATION THAT REMOTELY CONTROLS AND MONITORS THE ROBOT.LET US PROCEED WITH THE DEMONSTRATION. THANK YOU.')
    elif str(command)=='break a leg':
        dance.main(ip)
    elif str(command)=='i love you':
        kiss()
    return ''
    

if __name__ == '__main__':
    app.run()
